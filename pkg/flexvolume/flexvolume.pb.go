// Code generated by protoc-gen-go.
// source: pkg/flexvolume/flexvolume.proto
// DO NOT EDIT!

package flexvolume

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type AttachRequest struct {
	JsonOptions []byte `protobuf:"bytes,1,opt,name=json_options,proto3" json:"json_options,omitempty"`
}

func (m *AttachRequest) Reset()                    { *m = AttachRequest{} }
func (m *AttachRequest) String() string            { return proto.CompactTextString(m) }
func (*AttachRequest) ProtoMessage()               {}
func (*AttachRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DetachRequest struct {
	MountDevice string `protobuf:"bytes,1,opt,name=mount_device" json:"mount_device,omitempty"`
}

func (m *DetachRequest) Reset()                    { *m = DetachRequest{} }
func (m *DetachRequest) String() string            { return proto.CompactTextString(m) }
func (*DetachRequest) ProtoMessage()               {}
func (*DetachRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MountRequest struct {
	TargetMountDir string `protobuf:"bytes,1,opt,name=target_mount_dir" json:"target_mount_dir,omitempty"`
	MountDevice    string `protobuf:"bytes,2,opt,name=mount_device" json:"mount_device,omitempty"`
	JsonOptions    []byte `protobuf:"bytes,3,opt,name=json_options,proto3" json:"json_options,omitempty"`
}

func (m *MountRequest) Reset()                    { *m = MountRequest{} }
func (m *MountRequest) String() string            { return proto.CompactTextString(m) }
func (*MountRequest) ProtoMessage()               {}
func (*MountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UnmountRequest struct {
	MountDir string `protobuf:"bytes,1,opt,name=mount_dir" json:"mount_dir,omitempty"`
}

func (m *UnmountRequest) Reset()                    { *m = UnmountRequest{} }
func (m *UnmountRequest) String() string            { return proto.CompactTextString(m) }
func (*UnmountRequest) ProtoMessage()               {}
func (*UnmountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*AttachRequest)(nil), "flexvolume.AttachRequest")
	proto.RegisterType((*DetachRequest)(nil), "flexvolume.DetachRequest")
	proto.RegisterType((*MountRequest)(nil), "flexvolume.MountRequest")
	proto.RegisterType((*UnmountRequest)(nil), "flexvolume.UnmountRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Init(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Init(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flexvolume.API/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flexvolume.API/Attach", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flexvolume.API/Detach", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flexvolume.API/Mount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flexvolume.API/Unmount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Init(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	Attach(context.Context, *AttachRequest) (*google_protobuf1.Empty, error)
	Detach(context.Context, *DetachRequest) (*google_protobuf1.Empty, error)
	Mount(context.Context, *MountRequest) (*google_protobuf1.Empty, error)
	Unmount(context.Context, *UnmountRequest) (*google_protobuf1.Empty, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Init(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Attach(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Detach(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Mount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Unmount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flexvolume.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _API_Init_Handler,
		},
		{
			MethodName: "Attach",
			Handler:    _API_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _API_Detach_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _API_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _API_Unmount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0x80, 0xd9, 0xe6, 0x36, 0xf7, 0xdb, 0xc9, 0x16, 0x45, 0x66, 0x15, 0x94, 0x88, 0x20, 0x1e,
	0x1a, 0xd0, 0x9b, 0xb7, 0x81, 0x82, 0x03, 0x45, 0x19, 0x7a, 0x1e, 0xd9, 0x96, 0xd5, 0xe8, 0x9a,
	0xd4, 0x36, 0x1d, 0x7a, 0xf5, 0x15, 0xf6, 0x68, 0xbe, 0x82, 0x0f, 0xa2, 0x4d, 0x5a, 0x4c, 0x27,
	0x05, 0x6f, 0xdb, 0x9f, 0x2f, 0x5f, 0xf8, 0xbf, 0xc2, 0x41, 0xf8, 0xe2, 0x93, 0xd9, 0x9c, 0xbd,
	0x2d, 0xe4, 0x3c, 0x09, 0x98, 0xf5, 0xd3, 0x0b, 0x23, 0xa9, 0x24, 0x82, 0xdf, 0x89, 0xbb, 0xef,
	0x4b, 0xe9, 0xcf, 0x19, 0xa1, 0x21, 0x27, 0x54, 0x08, 0xa9, 0xa8, 0xe2, 0x52, 0xc4, 0x86, 0x74,
	0xf7, 0xb2, 0x53, 0xfd, 0x6f, 0x9c, 0xcc, 0x08, 0x0b, 0x42, 0xf5, 0x6e, 0x0e, 0xf1, 0x31, 0xb4,
	0xfb, 0x4a, 0xd1, 0xc9, 0xd3, 0x90, 0xbd, 0x26, 0x2c, 0x56, 0x68, 0x1b, 0x9c, 0xe7, 0x58, 0x8a,
	0x91, 0x0c, 0xb5, 0xa3, 0x57, 0x39, 0xac, 0x9c, 0x38, 0x29, 0x76, 0xc9, 0x56, 0xb0, 0x40, 0x26,
	0x42, 0x8d, 0xa6, 0x6c, 0xc1, 0x27, 0x4c, 0x63, 0x2d, 0xfc, 0x00, 0xce, 0x6d, 0x3a, 0xcd, 0xa9,
	0x1e, 0x74, 0x14, 0x8d, 0x7c, 0xa6, 0x46, 0x19, 0xcc, 0x23, 0x43, 0xfe, 0xb9, 0x5f, 0xcd, 0xa7,
	0x85, 0xc7, 0x6b, 0xfa, 0xf1, 0x23, 0xd8, 0x7c, 0x14, 0x81, 0xed, 0xed, 0x42, 0x6b, 0x45, 0x78,
	0xb6, 0xac, 0x41, 0xad, 0x7f, 0x3f, 0x40, 0xd7, 0xb0, 0x36, 0x10, 0x5c, 0xa1, 0x1d, 0xcf, 0xac,
	0xed, 0xe5, 0x6b, 0x7b, 0x57, 0xe9, 0xda, 0x6e, 0xc9, 0x1c, 0x77, 0x3e, 0x3e, 0xbf, 0x96, 0x55,
	0xc0, 0x75, 0xc2, 0x7f, 0xae, 0x5f, 0x54, 0x4e, 0xd1, 0x1d, 0x34, 0x4c, 0x1a, 0xb4, 0xeb, 0x59,
	0xf9, 0x0b, 0xb9, 0x4a, 0x75, 0x48, 0xeb, 0x1c, 0xdc, 0x24, 0x54, 0xf3, 0x99, 0xd0, 0x44, 0x2c,
	0x0a, 0x0b, 0x61, 0xff, 0x21, 0x9c, 0xb2, 0x5c, 0x78, 0x03, 0x75, 0x9d, 0x1b, 0xf5, 0x6c, 0x9f,
	0xfd, 0x05, 0x4a, 0x75, 0x5d, 0xad, 0xdb, 0xc0, 0x0d, 0xa2, 0x43, 0xa6, 0xb6, 0x21, 0x34, 0xb3,
	0xcc, 0xc8, 0xb5, 0x7d, 0xc5, 0xf6, 0xa5, 0xc6, 0x2d, 0x6d, 0x6c, 0xe3, 0x75, 0x92, 0x88, 0xdc,
	0x39, 0x6e, 0x68, 0xe8, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xb9, 0xc0, 0x2f, 0xcf, 0x02,
	0x00, 0x00,
}
